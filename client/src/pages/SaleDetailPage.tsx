import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import {
  ArrowLeft,
  Printer,
  Clock,
  CreditCard,
  User,
  XCircle,
  RotateCcw,
  FileText,
} from "lucide-react";

import { Sale } from "../types/sales";
import { ReceiptInfo } from "../types/receipt";

import { salesDB } from "../services/salesDB";
import { receiptService } from "../services/receiptService";

import {
  calculateCartTotals,
  calculateCartItemTotals,
  formatCurrency,
  formatVatRate,
} from "../utils/vatUtils";

import ReasonModal from "../components/ReasonModal";
import Button from "../components/Button";

const SaleDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [sale, setSale] = useState<Sale | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [showRefundModal, setShowRefundModal] = useState(false);

  useEffect(() => {
    const fetchSale = async () => {
      if (id) {
        try {
          const saleData = await salesDB.getSaleById(id);
          setSale(saleData);
        } catch (error) {
          console.error("SatÄ±ÅŸ verisi yÃ¼klenirken hata:", error);
        } finally {
          setIsLoading(false);
        }
      }
    };

    fetchSale();
  }, [id]);

  const handlePrint = async () => {
    if (!sale) return;

    try {
      const receiptData: ReceiptInfo = {
        ...sale,
        subtotal: sale.subtotal,
        vatAmount: sale.vatAmount,
        total: sale.total,
        items: sale.items,
        date: sale.date,
      };

      const result = await receiptService.printReceipt(receiptData);
      if (result) {
        console.log("FiÅŸ yazdÄ±rÄ±ldÄ±");
      } else {
        alert("FiÅŸ yazdÄ±rÄ±lÄ±rken bir hata oluÅŸtu!");
      }
    } catch (error) {
      console.error("YazdÄ±rma hatasÄ±:", error);
      alert("FiÅŸ yazdÄ±rÄ±lÄ±rken bir hata oluÅŸtu!");
    }
  };

  const handleCancelConfirm = async (reason: string) => {
    if (!sale) return;

    try {
      const updatedSale = await salesDB.cancelSale(sale.id, reason);
      if (updatedSale) {
        setSale(updatedSale);
        alert("SatÄ±ÅŸ baÅŸarÄ±yla iptal edildi.");
      } else {
        alert("SatÄ±ÅŸ iptal edilirken bir hata oluÅŸtu!");
      }
    } catch (error) {
      console.error("SatÄ±ÅŸ iptali sÄ±rasÄ±nda hata:", error);
      alert("SatÄ±ÅŸ iptal edilirken bir hata oluÅŸtu!");
    } finally {
      setShowCancelModal(false);
    }
  };

  const handleRefundConfirm = async (reason: string) => {
    if (!sale) return;

    try {
      const updatedSale = await salesDB.refundSale(sale.id, reason);
      if (updatedSale) {
        setSale(updatedSale);
        alert("Ä°ade iÅŸlemi baÅŸarÄ±yla tamamlandÄ±.");
      } else {
        alert("Ä°ade iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu!");
      }
    } catch (error) {
      console.error("Ä°ade iÅŸlemi sÄ±rasÄ±nda hata:", error);
      alert("Ä°ade iÅŸlemi sÄ±rasÄ±nda bir hata oluÅŸtu!");
    } finally {
      setShowRefundModal(false);
    }
  };

  if (isLoading) {
    return <div className="p-8 text-center">YÃ¼kleniyor...</div>;
  }

  if (!sale) {
    return (
      <div className="p-8 text-center">
        <div className="text-gray-500 mb-4">SatÄ±ÅŸ bulunamadÄ±</div>
        <button
          onClick={() => navigate("/history")}
          className="text-primary-600 hover:text-primary-700"
        >
          SatÄ±ÅŸ Listesine DÃ¶n
        </button>
      </div>
    );
  }

  return (
    <div className="p-6">
      {/* Ãœst Bar */}
      <div className="flex justify-between items-center mb-6">
        <button
          onClick={() => navigate("/history")}
          className="flex items-center text-gray-600 hover:text-gray-800"
        >
          <ArrowLeft className="mr-2" size={20} />
          SatÄ±ÅŸ Listesine DÃ¶n
        </button>
        <div className="flex gap-2">
          <Button onClick={handlePrint} icon={Printer}>
            FiÅŸi YazdÄ±r
          </Button>
        </div>
      </div>

      {/* Ana Ä°Ã§erik */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Sol Panel - SatÄ±ÅŸ DetaylarÄ± */}
        <div className="lg:col-span-2 space-y-6">
          {/* SatÄ±ÅŸ Ã–zeti */}
          <div className="bg-white p-6 rounded-lg border">
            <h2 className="text-xl font-semibold mb-4">SatÄ±ÅŸ Bilgileri</h2>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <div className="text-sm text-gray-500">FiÅŸ No</div>
                <div className="font-medium">{sale.receiptNo}</div>
              </div>
              <div>
                <div className="text-sm text-gray-500">Tarih</div>
                <div className="font-medium">
                  {sale.date.toLocaleString("tr-TR")}
                </div>
              </div>
              <div>
                <div className="text-sm text-gray-500">Toplam Tutar</div>
                <div className="font-medium text-lg">
                  {formatCurrency(sale.total)}
                </div>
              </div>
              <div>
                <div className="text-sm text-gray-500">Ã–deme YÃ¶ntemi</div>
                <div className="font-medium">
                  {sale.paymentMethod === "nakit" ? "ðŸ’µ Nakit" : "ðŸ’³ Kart"}
                </div>
              </div>
              {sale.paymentMethod === "nakit" && sale.cashReceived && (
                <>
                  <div>
                    <div className="text-sm text-gray-500">AlÄ±nan</div>
                    <div className="font-medium">
                      {formatCurrency(sale.cashReceived || 0)}
                    </div>
                  </div>
                  <div>
                    <div className="text-sm text-gray-500">Para ÃœstÃ¼</div>
                    <div className="font-medium">
                      {formatCurrency(sale.changeAmount || 0)}
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>

          {/* ÃœrÃ¼n Listesi */}
          <div className="bg-white rounded-lg border">
            <div className="p-6 border-b">
              <h2 className="text-xl font-semibold">ÃœrÃ¼nler</h2>
            </div>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                      ÃœrÃ¼n
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                      Birim Fiyat
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                      Miktar
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                      KDV
                    </th>
                    <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                      Toplam
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {sale.items.map((item) => (
                    <tr key={item.id}>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="font-medium text-gray-900">
                          {item.name}
                        </div>
                        <div className="text-sm text-gray-500">
                          {item.category}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                        {formatCurrency(item.price)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                        {item.quantity}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                        {formatVatRate(item.vatRate)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        {formatCurrency(item.price)} +{" "}
                        {formatVatRate(item.vatRate)}
                      </td>
                    </tr>
                  ))}
                </tbody>
                <tfoot className="bg-gray-50">
                  <tr>
                    <td
                      colSpan={3}
                      className="px-6 py-4 text-right font-medium"
                    >
                      Toplam
                    </td>
                    <td className="px-6 py-4 text-right text-lg font-bold">
                      {formatCurrency(sale.total)}
                    </td>
                  </tr>
                </tfoot>
              </table>
            </div>
          </div>
        </div>

        {/* SaÄŸ Panel - Durum ve Ä°ÅŸlem GeÃ§miÅŸi */}
        <div className="space-y-6">
          {/* Durum KartÄ± */}
          <div className="bg-white p-6 rounded-lg border">
            <h2 className="text-lg font-semibold mb-4">Durum Bilgisi</h2>
            <div className="space-y-4">
              <div
                className={`p-3 rounded-lg ${
                  sale.status === "completed"
                    ? "bg-green-50 text-green-700"
                    : sale.status === "cancelled"
                    ? "bg-red-50 text-red-700"
                    : "bg-orange-50 text-orange-700"
                }`}
              >
                <div className="font-medium">
                  {sale.status === "completed" && "TamamlandÄ±"}
                  {sale.status === "cancelled" && "Ä°ptal Edildi"}
                  {sale.status === "refunded" && "Ä°ade Edildi"}
                </div>
                {(sale.cancelReason || sale.refundReason) && (
                  <div className="text-sm mt-1">
                    {sale.cancelReason && `Ä°ptal sebebi: ${sale.cancelReason}`}
                    {sale.refundReason && `Ä°ade sebebi: ${sale.refundReason}`}
                  </div>
                )}
              </div>

              {sale.status === "completed" && (
                <div className="flex gap-2">
                  <button
                    onClick={() => setShowCancelModal(true)}
                    className="flex-1 flex items-center justify-center px-4 py-2 border border-red-600 text-red-600 rounded-lg hover:bg-red-50"
                  >
                    <XCircle className="mr-2" size={20} />
                    Ä°ptal Et
                  </button>
                  <button
                    onClick={() => setShowRefundModal(true)}
                    className="flex-1 flex items-center justify-center px-4 py-2 border border-orange-600 text-orange-600 rounded-lg hover:bg-orange-50"
                  >
                    <RotateCcw className="mr-2" size={20} />
                    Ä°ade Al
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Ä°ÅŸlem GeÃ§miÅŸi */}
          <div className="bg-white p-6 rounded-lg border">
            <h2 className="text-lg font-semibold mb-4">Ä°ÅŸlem GeÃ§miÅŸi</h2>
            <div className="space-y-4">
              <div className="flex gap-3">
                <div className="text-primary-600">
                  <Clock size={20} />
                </div>
                <div>
                  <div className="text-sm font-medium">SatÄ±ÅŸ YapÄ±ldÄ±</div>
                  <div className="text-xs text-gray-500">
                    {sale.date.toLocaleString("tr-TR")}
                  </div>
                </div>
              </div>
              {sale.status !== "completed" && (
                <div className="flex gap-3">
                  <div className="text-red-600">
                    <XCircle size={20} />
                  </div>
                  <div>
                    <div className="text-sm font-medium">
                      {sale.status === "cancelled"
                        ? "SatÄ±ÅŸ Ä°ptal Edildi"
                        : "ÃœrÃ¼n Ä°ade Edildi"}
                    </div>
                    <div className="text-xs text-gray-500">
                      {sale.refundDate?.toLocaleString("tr-TR")}
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {sale.cancelReason || sale.refundReason}
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Ä°ptal ModalÄ± */}
      <ReasonModal
        isOpen={showCancelModal}
        onClose={() => setShowCancelModal(false)}
        onConfirm={handleCancelConfirm}
        title="SatÄ±ÅŸ Ä°ptali"
        actionText="Ä°ptal Et"
        type="cancel"
      />

      {/* Ä°ade ModalÄ± */}
      <ReasonModal
        isOpen={showRefundModal}
        onClose={() => setShowRefundModal(false)}
        onConfirm={handleRefundConfirm}
        title="SatÄ±ÅŸ Ä°adesi"
        actionText="Ä°ade Et"
        type="refund"
      />
    </div>
  );
};

export default SaleDetailPage;
